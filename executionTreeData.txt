method withdraw
 produce balance >= amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: [])
  evaluate balance >= amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _"])
   evaluate balance,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _"])
   evaluate amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _"])
 produce amount > 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12"])
  evaluate amount > 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _"])
   evaluate amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _"])
   evaluate 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _"])
 WellformednessCheck null,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
  produce remaining >= 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
   evaluate remaining >= 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@7@12 == _"])
    evaluate remaining,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@7@12 == _"])
    evaluate 0,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@7@12 == _"])
 execute assert balance >= amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
  consume balance >= amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
   evaluate balance >= amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
    evaluate balance,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
    evaluate amount,"prestate": Imprecise: false, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
  wellFormedness balance >= amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
   produce balance >= amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0"])
    evaluate balance >= amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _"])
     evaluate balance,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _"])
     evaluate amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _"])
   produce balance >= amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _"])
    evaluate balance >= amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
     evaluate balance,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
     evaluate amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
 execute remaining := balance - amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
  evaluate balance - amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
   evaluate balance,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
   evaluate amount,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@5@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _"])
 consume remaining >= 0,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@10@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _", "remaining@10@12 == balance@3@12 - amount@4@12"])
  evaluate remaining >= 0,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@10@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _", "remaining@10@12 == balance@3@12 - amount@4@12"])
   evaluate remaining,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@10@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _", "remaining@10@12 == balance@3@12 - amount@4@12"])
   evaluate 0,"prestate": Imprecise: true, Store: [{balance -> balance@3@12}, {amount -> amount@4@12}, {remaining -> remaining@10@12}], Heap: [], OptHeap: [], PCs: ["First:($t@6@12) == _", "balance@3@12 >= amount@4@12", "Second:($t@6@12) == _", "amount@4@12 > 0", "$t@8@12 == _", "$t@9@12 == _", "remaining@10@12 == balance@3@12 - amount@4@12"])

